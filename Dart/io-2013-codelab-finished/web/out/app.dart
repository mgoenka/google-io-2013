// Auto-generated from index.html.
// DO NOT EDIT.

library writer;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'document_item.html.dart';
import 'dart:async';
import 'dart:html' hide Document;
import 'package:web_ui/web_ui.dart';
import '_from_packages/writer/document.dart';
import '_from_packages/writer/search.dart';
import '_from_packages/writer/storage.dart';


// Original code


// STEP 3: Add an observed list of documents.
final List<Document> documents = toObservable([]);

final __changes = new __observe.Observable();

Document __$activeDocument = new Document('Hello Codelab!',
    'Try typing in this document!');
Document get activeDocument {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'activeDocument');
  }
  return __$activeDocument;
}
set activeDocument(Document value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'activeDocument',
        __$activeDocument, value);
  }
  __$activeDocument = value;
}

bool __$contentActive = true;
bool get contentActive {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'contentActive');
  }
  return __$contentActive;
}
set contentActive(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'contentActive',
        __$contentActive, value);
  }
  __$contentActive = value;
}

String get sidebarClass => contentActive ? '' : 'active';

String get mainClass => contentActive ? 'active' : '';

// STEP 3: Create a new document.
void createDocument() {
  // Create a new document.
  var doc = new Document('Untitled', '');
  documents.add(doc);
  selectDocument(doc);
}

// STEP 3: Add code to delete a document
void deleteDocument(Document doc) {
  documents.remove(doc);

  // STEP 5: Also delete from local storage.
  removeDocument(doc);
}

// STEP 3: Add code to select a document.
/**
 * Select a document.
 *
 * If [doc] is not found, try to select [activeDocument], and if that's not
 * found, then select the last document. If there are no documents, select
 * nothing.
 *
 * If [markActive] is true, then open the editing window.
 */
void selectDocument(Document doc, {bool markActive: false, Event event}) {
  if (documents.isEmpty) {
    activeDocument = null;
  } else if (doc != null && documents.contains(doc) && doc != activeDocument) {
    // Change active document.
    activeDocument = doc;
  } else if (activeDocument != null && documents.contains(activeDocument)) {
    // Stay on the active document and display the editing window.
    contentActive = markActive && doc == activeDocument;
  } else {
    // Fall back to the last document.
    activeDocument = documents.last;
  }
}

/// Starts the application.
void main() {
  // STEP 5: Initialize with all documents from local storage.
  documents.addAll(fetchDocuments());

  // STEP 3: Create a new document if there are none.
  if (documents.isEmpty) createDocument();

  // STEP 3: Select the first document in the list of documents.
  selectDocument(documents.first);
}

int __$_startTime;
int get _startTime {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, '_startTime');
  }
  return __$_startTime;
}
set _startTime(int value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, '_startTime',
        __$_startTime, value);
  }
  __$_startTime = value;
}

/// Listen for touch to start. Clicks will pass through.
touchStart(TouchEvent event, Document doc) {
  (event.currentTarget as Element).classes.add('touched');
  _startTime = event.timeStamp;
}

/// Listen for moves, which stop clicks.
touchMove(TouchEvent event) {
  event.preventDefault();
}

/// After waiting for a longpress, send a mail of the document.
touchEnd(TouchEvent event, Document doc) {
  (event.currentTarget as Element).classes.remove('touched');
  if (event.timeStamp > _startTime + 700) {
    event.preventDefault();
    window.location.href = 'mailto:?to=&subject=Document: ${doc.title}'
        '&body=${doc.content}%0D%0A%0D%0A%0D%0AThis e-mail was written with The Dart Web Writer!'
        '%0D%0A'
        '%0D%0AThanks for trying out the codelab!'
        '%0D%0Awww.dartlang.org';
  }
}

/// Simply stop the event wholesale.
void touchCancel(TouchEvent event) {
  event.preventDefault();
}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.tag('template'), __html1 = new autogenerated.Element.html('<div is="x-document-item"></div>'), __html2 = new autogenerated.Element.html('<div class="title">\n          <!-- Button to go back to document list.\n               Only visible in a small viewport. -->\n          <button>&lt;</button>\n\n          <!-- Document title -->\n          <div class="input-wrap">\n\n            <!-- STEP 5: Add event handler to save the active document. -->\n            <input type="text">\n          </div>\n        </div>'), __html3 = new autogenerated.Element.html('<textarea class="content"></textarea>'), __html4 = new autogenerated.Element.html('<div class="footer"></div>');
  var __e0, __e1, __e12, __e13, __e4, __e5;
  var __t = new autogenerated.Template(__root);
  __e5 = __root.nodes[3];
  __e0 = __e5.nodes[1].nodes[3];
  __t.listen(__e0.onClick, ($event) { createDocument(); });
  __e1 = __e5.nodes[1].nodes[5].nodes[3];
  __t.listen(__e1.onInput, ($event) { searchFilter = __e1.value; });
  __t.oneWayBind(() => searchFilter, (e) { if (__e1.value != e) __e1.value = e; }, false, false);
  __e4 = __e5.nodes[5].nodes[3];
  __t.loop(__e4, () => documents, ($list, $index, __t) {
    var doc = $list[$index];
    var __e3;
    __e3 = __html0.clone(true);
    __t.conditional(__e3, () => matchesSearchFilter(doc), (__t) {
      var __e2;
      __e2 = __html1.clone(true);
      __t.listen(__e2.onClick, ($event) { selectDocument(doc, markActive: true, event: $event); });
      __t.listen(__e2.onTouchCancel, ($event) { touchCancel($event); });
      __t.listen(__e2.onTouchEnd, ($event) { touchEnd($event, doc); });
      __t.listen(__e2.onTouchLeave, ($event) { touchCancel($event); });
      __t.listen(__e2.onTouchMove, ($event) { touchMove($event); });
      __t.listen(__e2.onTouchStart, ($event) { touchStart($event, doc); });
      __t.oneWayBind(() => doc, (e) { if (__e2.xtag.doc != e) __e2.xtag.doc = e; }, false, false);
      __t.component(new DocumentItem()..host = __e2);
    __t.addAll([new autogenerated.Text('\n\n            '),
        new autogenerated.Text('\n            '),
        new autogenerated.Text('\n            '),
        __e2,
        new autogenerated.Text('\n          ')]);
    });

  __t.addAll([new autogenerated.Text('\n\n          '),
      new autogenerated.Text('\n          '),
      __e3,
      new autogenerated.Text('\n\n        ')]);
  });
  __t.bindClass(__e5, () => sidebarClass, false);
  __e13 = __root.nodes[7];
  __e12 = __e13.nodes[3];
  __t.conditional(__e12, () => activeDocument != null, (__t) {
    var __e11, __e6, __e7, __e8, __e9;
    __e8 = __html2.clone(true);
    __e6 = __e8.nodes[3];
    __t.listen(__e6.onClick, ($event) { contentActive = false; });
    __e7 = __e8.nodes[7].nodes[3];
    __t.listen(__e7.onInput, ($event) { activeDocument.title = __e7.value; });
    __t.listen(__e7.onKeyUp, ($event) { $event = new autogenerated.KeyEvent($event); saveDocument(activeDocument); });
    __t.oneWayBind(() => activeDocument.title, (e) { if (__e7.value != e) __e7.value = e; }, false, false);
    __e9 = __html3.clone(true);
    __t.listen(__e9.onInput, ($event) { activeDocument.content = __e9.value; });
    __t.listen(__e9.onKeyUp, ($event) { $event = new autogenerated.KeyEvent($event); saveDocument(activeDocument); });
    __t.oneWayBind(() => activeDocument.content, (e) { if (__e9.value != e) __e9.value = e; }, false, false);
    __e11 = __html4.clone(true);
    var __binding10 = __t.contentBind(() => activeDocument.wordCount, false);
    __e11.nodes.addAll([new autogenerated.Text('\n\n          '),
        new autogenerated.Text('\n          '),
        __binding10,
        new autogenerated.Text('\n\n        ')]);
  __t.addAll([new autogenerated.Text('\n\n        '),
      __e8,
      new autogenerated.Text('\n\n        '),
      new autogenerated.Text('\n        '),
      __e9,
      new autogenerated.Text('\n\n        '),
      __e11,
      new autogenerated.Text('\n      ')]);
  });

  __t.bindClass(__e13, () => mainClass, false);
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=app.dart.map